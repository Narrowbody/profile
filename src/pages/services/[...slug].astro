---
import { type CollectionEntry, getCollection } from 'astro:content';

import BaseLayout from '../../layouts/BaseLayout.astro';
import ContactCTA from '../../components/ContactCTA.astro';
import Hero from '../../components/Hero.astro';
import Pill from '../../components/Pill.astro';

interface Props {
	entry: CollectionEntry<'services'>;
}

// This is a dynamic route that generates a page for every Markdown file in src/content/
// Read more about dynamic routes and this `getStaticPaths` function in the Astro docs:
// https://docs.astro.build/en/core-concepts/routing/#dynamic-routes
export async function getStaticPaths() {
	const services = await getCollection('services');
	return services.map((entry) => ({
		params: { slug: entry.slug },
		props: { entry },
	}));
}

const { entry } = Astro.props;
const { Content } = await entry.render();
---

<BaseLayout title={entry.data.title} description={entry.data.description}>
	<div class='stack gap-20'>
		<div class='stack gap-15'>
			<header>
				<div class='wrapper stack gap-2'>
					<div class='back'>
						<a class='back-link' href='/services/'
							>{'< Back to Services'}</a
						>
					</div>
					<div class='hero'>
						<Hero title={entry.data.title} align='start'>
							<div class='details'>
								<h5>Applicable to:</h5>
								{entry.data.tags.map((t) => <Pill>{t}</Pill>)}
							</div>
						</Hero>
					</div>
					<div class='description'>
						<h5>Description:</h5>
						<p>{entry.data.description}</p>
					</div>
				</div>
			</header>
		</div>
	</div>
	<main class='wrapper'>
		<div class='stack gap-10 content'>
			{
				entry.data.img && (
					<img src={entry.data.img} alt={entry.data.img_alt || ''} />
				)
			}
			<div class='content'>
				<Content />
			</div>
		</div>
	</main>

	<ContactCTA titleForCTA='Interested in working together?' />
</BaseLayout>
<style>
	header {
		padding-bottom: 2.5rem;
		border-bottom: 1px solid var(--gray-800);
	}

	.back {
		display: flex;
		flex-direction: row;
	}
	a {
		font-size: large;
		font-weight: 600;
	}
	.back-link {
		display: none;
	}

	.hero {
		margin: 0 auto;
		margin-top: 3rem;
	}

	.details {
		display: flex;
		flex-direction: row;
		justify-items: start;
		align-items: center;
		margin: 0 auto;
	}

	.tags {
		display: flex;
		flex-direction: row;
		justify-items: center;
		align-items: center;
		gap: 0.5rem;
	}

	.description {
		margin: 0 auto;

		margin-top: 2rem;
		font-size: var(--text-lg);
		max-width: 54ch;
	}

	.content {
		max-width: 65ch;
		margin-inline: auto;
		font-size: large;
	}

	.content > :global(* + *) {
		margin-top: 1rem;
	}

	.content :global(h1),
	.content :global(h2),
	.content :global(h3),
	.content :global(h4),
	.content :global(h5) {
		margin: 1.5rem 0;
	}

	.content :global(img) {
		border-radius: 1.5rem;
		box-shadow: var(--shadow-sm);
		background: var(--gradient-subtle);
		border: 1px solid var(--gray-800);
		margin-top: 5rem;
	}

	.content :global(blockquote) {
		font-size: var(--text-lg);
		font-family: var(--font-brand);
		font-weight: 600;
		line-height: 1.1;
		padding-inline-start: 1.5rem;
		border-inline-start: 0.25rem solid var(--accent-dark);
		color: var(--gray-0);
	}

	.back-link,
	.content :global(a) {
		text-decoration: 1px solid underline transparent;
		text-underline-offset: 0.25em;
		transition: text-decoration-color var(--theme-transition);
	}

	.back-link:hover,
	.back-link:focus,
	.content :global(a:hover),
	.content :global(a:focus) {
		text-decoration-color: currentColor;
	}

	@media (min-width: 50em) {
		.back-link {
			display: block;
			align-self: flex-start;
		}

		.details {
			flex-direction: row;
			align-content: center;
			gap: 1rem;
			border: solid 2px red;
		}

		.content :global(blockquote) {
			font-size: var(--text-2xl);
		}
	}
</style>
